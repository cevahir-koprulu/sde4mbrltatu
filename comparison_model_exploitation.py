import matplotlib.pyplot as plt
import numpy as np


plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']
plt.rcParams['font.size'] = 16

algo_colors = {
    "MOPO": "red",
    "TATU+MOPO": "blue",
    "NUNO": "green",
}

dataset_dict = {
    "random": {
        "MOPO": {
            "gt": 40.7,
            "pess": 34.7,
        },
        "TATU+MOPO": {
            "gt": 28.7,
            "pess": 22.0,
        },
        "NUNO": {
            "gt": 52.3,
            "pess": 43.1,
        },
    },
    "medium": {
        "MOPO": {
            "gt": 72.3,
            "pess": 65.2,
        },
        "TATU+MOPO": {
            "gt": 72.7,
            "pess": 65.6,
        },
        "NUNO": {
            "gt": 69.0,
            "pess": 75.0,
        },
    },
    "medium-replay": {
        "MOPO": {
            "gt": 71.1,
            "pess": 59.5,
        },
        "TATU+MOPO": {
            "gt": 64.8,
            "pess": 55.2,
        },
        "NUNO": {
            "gt": 67.4,
            "pess": 71.5,
        },
    },
    "medium-expert": {
        "MOPO": {
            "gt": 104.9,
            "pess": 103.0,
        },
        "TATU+MOPO": {
            "gt": 100.8,
            "pess": 100.5,
        },
        "NUNO": {
            "gt": 96.7,
            "pess": 97.5,
        },
    }
} 

x = np.arange(len(list(dataset_dict.keys())))  # the label locations
width = 0.075  # the width of the bars
multiplier = 0

fig, ax = plt.subplots(figsize=(15,6), layout='constrained')
label_count = 0
for dataset, score_dict in dataset_dict.items():
    print(score_dict)
    for algo, algo_dict in score_dict.items():
        print(algo_dict)
        if label_count == 0:
            rects = ax.bar(width * multiplier, algo_dict["gt"], width, label=algo, edgecolor='black', color=algo_colors[algo])
            ax.bar_label(rects, padding=3, fontsize=11)
            rects = ax.bar(width * (multiplier+1), algo_dict["pess"], width, edgecolor='black', hatch="//", color=algo_colors[algo])
            ax.bar_label(rects, padding=3, fontsize=11)
        else:
            rects = ax.bar(width * multiplier, algo_dict["gt"], width, edgecolor='black', color=algo_colors[algo])
            ax.bar_label(rects, padding=3, fontsize=11)
            rects = ax.bar(width * (multiplier+1), algo_dict["pess"], width, edgecolor='black', hatch="//", color=algo_colors[algo])
            ax.bar_label(rects, padding=3, fontsize=11)
        multiplier += 2
    multiplier += 1
    label_count += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Human-normalized score')
# ax.set_title('Penguin attributes by species')
offsets = [3*width + i*(width*6) + (i-0.5)*width  for i in range(len(list(dataset_dict.keys())))]
ax.set_xticks(offsets, list(dataset_dict.keys()))
ax.legend(loc='upper left', ncols=3)
ax.set_ylim(0, 120)

plt.savefig("comparison_model_exploitation.pdf", dpi=1000)